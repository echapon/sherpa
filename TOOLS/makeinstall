#!/bin/bash
GPATH=$PWD
RELEASE="TRUE"
LOGFILE="sherpa_install.log"

DIRS="ATOOLS-2.0 BEAM-1.0 PDF-1.0 MODEL-1.0 PHASIC++-1.0"
DIRS=$DIRS" EXTRA_XS-1.0 AMEGIC++-2.0 APACIC++-2.0"
DIRS=$DIRS" AHADIC++-1.0 AMISIC++-1.0 HADRONS++-0.0"
DIRS=$DIRS" ANALYSIS-1.0 SHERPA-1.0"

ECXXFLAGS=""
EFFLAGS=""
ECOPT=""
EMOPT=""

rmr () { 
  for file in `ls -a` ; do   
    if [ $file != . ] && [ $file != .. ]; then
      if [ -d $file ] ; then
        cd $file  
        rmr "$1" $2
        cd ..                                                             
      fi
    fi
  done  
  for i in $1 ; do    
    rm -f $2 $i
  done
}
rebuild_current() {
  if [ "$1" != "" ] ; then cd .. ; fi
  if [ "$RELEASE" = "TRUE" ] ; then
    libtoolize --force >> $GPATH/$LOGFILE 2>&1
    aclocal >> $GPATH/$LOGFILE 2>&1
    autoheader >> ../$LOGFILE 2>&1
    automake -a >> $GPATH/$LOGFILE 2>&1
    autoconf >> $GPATH/$LOGFILE 2>&1
  else
    libtoolize --force
    aclocal
    autoheader
    automake -a
    autoconf
  fi
  if [ "$1" != "" ] ; then cd $1 ; fi
}
configure_current() {
  if [ "$1" != "" ] ; then cd .. ; fi
  if [ "$RELEASE" = "TRUE" ] ; then
    ./configure $ECOPT >> $GPATH/$LOGFILE 2>&1
  else
    ./configure $ECOPT
  fi
  if [ "$?" != "0" ] && [ "$NOABORT" != "TRUE" ] ; then
    clear;
    echo "makeinstall: error: './configure' returned an error."
    echo "                    please have a look at '$LOGFILE' for the reason.";
    exit 1; 
  fi;
  if [ "$1" != "" ] ; then cd $1 ; fi
}

print_help() {
    echo "makeinstall version 1.0" && echo && \
    echo "options: -c             configure before compiling (enabled with '-t')" && \
    echo "         -t             rebuild 'Makefile.in's and 'configure' before compiling" && \
    echo "         -f             display the full information on the setup" && \
    echo "         -r             display minimal information but write a logfile instead" && \
    echo "         -s             create a simple install script to be customized by the user" && \
    echo "         -o             install single module" && \
    echo "         --clean        execute 'make clean' in every module before compiling" && \
    echo "         --no-abort     ignore exit status of 'make'" && \
    echo "         --copt         define option for 'configure'" && \
    echo "         --mopt         define option for 'make' (default is '-j2')" && \
    echo "         --cxx          define cxx flag for 'make'" && \
    echo "         --f            define fortran flag for 'make'" && \
    echo "         --clean-up     execute 'make clean' in every module and exit" && \
    echo "         --rm-libs      remove shared libraries (does not remove '.lo' files)" && \
    echo "         --make-only    do not install" && \
    echo "         -h             display this help and exit" && echo
}

while getopts :hctfrso OPT
do
  case $OPT in
  c) CONFIGURE=TRUE ;; 
  t) TOTAL=TRUE && CONFIGURE=TRUE ;;
  f) RELEASE=FALSE ;;
  r) RELEASE=TRUE ;;
  s) SCRIPT=TRUE ;;
  o) ONE=TRUE ;;
  h) print_help && exit 0 ;;
  \?)
    shift `expr $OPTIND - 1`
    if [ "$1" = "--clean" ]; then CLEAN=TRUE
    elif [ "$1" = "--no-abort" ]; then NOABORT=TRUE
    elif [ "$1" = "--copt" ]; then 
      CONFIGURE=TRUE && ECOPT=$2" "$ECOPT && shift 1
    elif [ "$1" = "--mopt" ]; then EMOPT=$2" "$EMOPT && shift 1
    elif [ "$1" = "--cxx" ]; then ECXXFLAGS=$2" "$ECXXFLAGS && shift 1
    elif [ "$1" = "--f" ]; then EFFLAGS=$2" "$EFFLAGS && shift 1
    elif [ "$1" = "--clean-up" ]; then CLEANUP=TRUE
    elif [ "$1" = "--rm-libs" ]; then RMLIBS=TRUE
    elif [ "$1" = "--make-only" ]; then MAKEONLY=TRUE
    else 
      echo -n "makeinstall: error: unrecognized option "
      if [ $OPTARG != "-" ]; then echo "'-$OPTARG'. try '--help'"
      else echo "'$1'. try '--help'"
      fi
      print_help && exit 1
    fi
    shift 1
    OPTIND=1
  esac
done
if [ ! "$ECXXFLAGS" = "" ]; then ECXXFLAGS="CXXFLAGS="$ECXXFLAGS ; fi
if [ ! "$EFFLAGS" = "" ]; then EFFLAGS="FFLAGS="$EFFLAGS ; fi
if [ "$EMOPT" = "" ]; then EMOPT="-j2" ; fi

if [ "$ONE" = "TRUE" ] ; then 
  echo "makeinstall: select module ( q) to quit )"
  select DIRS in $DIRS ; do
    if [ "$DIRS" != "" ] ; then 
      SINGLE="TRUE"
      break
    else 
      if [ "$REPLY" = "q" ] || [ "$REPLY" = "Q" ]  ; then exit ; fi
    fi
  done
fi

if [ "$SCRIPT" = "TRUE" ] ; then 
  echo "makeinstall: creating simple install scripts"
  read -t 60 -p "please input the desired name: " NAME
  if ! test -f $NAME ; then 
    echo -e "#!/bin/bash\n\nlibtoolize --force\naclocal\nautomake -a\nautoconf\n" > $NAME
    echo -e "./configure\nmake install" >> $NAME
    chmod 775 $NAME
  else
    echo "makeinstall: error: file '$NAME' already exists"
  fi
  exit 0
fi
if [ "`gcc -dumpversion`" = "2.96" ] ; then 
  echo -e "\n\e[31m********************************************************\e[0m"
  echo -e "\e[31m*\e[0m\e[1m                     Severe Error                     \e[0m\e[31m*\e[0m"
  echo -e "\e[31m********************************************************\e[0m"
  echo -e "\e[31m*                                                      *\e[0m"
  echo -e "\e[31m*\e[0m\e[1m   The Sherpa package will not compile on gcc 2.96.   \e[0m\e[31m*\e[0m"
  echo -e "\e[31m*                                                      *\e[0m"
  echo -e "\e[31m*\e[0m gcc 2.96 causes different problems with STL headers. \e[31m*\e[0m"
  echo -e "\e[31m*\e[0m Please note that if you insist on using this version \e[31m*\e[0m"
  echo -e "\e[31m*\e[0m           we will not provide any support.           \e[31m*\e[0m"
  echo -e "\e[31m*                                                      \e[31m*\e[0m"
  echo -e "\e[31m*\e[31m              We recommend you to employ              \e[31m*\e[0m"
  echo -e "\e[31m*\e[31m        gcc 2.95 or any of the 3.x.x versions         \e[31m*\e[0m"
  echo -e "\e[31m*                                                      \e[31m*\e[0m"
  echo -e "\e[31m*\e[0m\e[1m              Aborting the installation               \e[0m\e[31m*\e[0m"
  echo -e "\e[31m*                                                      *\e[0m"
  echo -e "\e[31m********************************************************\e[0m\n"
  exit 1;
fi

if [ "$RELEASE" = "TRUE" ] ; then
  echo -e "\n\e[32m******************************************************\e[0m"
  echo -e "\e[32m*\e[0m\e[5m\e[1m           Installing the SHERPA package            \e[0m\e[32m*\e[0m"
  echo -e "\e[32m******************************************************\e[0m\n"
  echo -e "writing stdout and stderr to '$LOGFILE'\n"
  echo -e "Starting installation at '$HOSTNAME' (architecture $HOSTTYPE) on `date`\n" > $LOGFILE
  echo -e "PATH=$PATH\n\nLD_LIBRARY_PATH=$LD_LIBRARY_PATH\n\nCLHEPDIR=$CLHEPDIR\n" >> $LOGFILE
  echo -en "gcc --version -> " >> $LOGFILE && gcc --version >> $LOGFILE
else
  echo "**************************************"
  echo "*   Installing the SHERPA package    *"
  echo "**************************************"
fi

if [ "$SED" = "" ] ; then export SED="sed" ; fi
if [ "$TOTAL" = "TRUE" ] && [ "$RELEASE" = "TRUE" ] ; then
  echo -ne "removing old setup files ...\r"
fi
if test "$SINGLE" = "TRUE" ; then
  PDIRS="$DIRS"
else
  PDIRS="."
fi
for I in $PDIRS;
do
  if test -d $I; then
    cd $I
      if [ "$RMLIBS" = "TRUE" ] ; then
        echo " removing libraries in $I"
        rmr "*.la *.so *.so.0 *.so.0.0.0"
      fi
      if [ "$CLEANUP" = "TRUE" ] ; then 
        echo " making clean in $I"
        make clean
      fi
      if [ "$TOTAL" = "TRUE" ] ; then
	if [ "$RELEASE" = "TRUE" ] ; then
          echo " removing setup files in $I" >> $GPATH/$LOGFILE 2>&1
	else
          echo " removing setup files in $I" 
	fi
        rmr "Makefile Makefile.in \
             aclocal.m4 config.guess config.log config.status config.sub configure \
             depcomp install-sh libtool ltconfig ltmain.sh missing mkinstalldirs"
        rmr "autom4te.cache" -r
      fi
    if ! test "$PDIRS" = "." ; then cd .. ; fi
  else 
    echo "makeinstall: warning: directory $I not found"
  fi
done
if [ "$TOTAL" = "TRUE" ] && [ "$RELEASE" = "TRUE" ] ; then
  echo -e "\e[32m\t\t\t\t\t\t  done\e[0m\n"
fi
if test "$RMLIBS" = "TRUE" || test "$CLEANUP" = "TRUE" ; then
  exit 0;
fi

if test "$TOTAL" = "TRUE" ; then
  rebuild_current
fi
if test "$CONFIGURE" = "TRUE" ; then
  configure_current
fi 
for I in $DIRS;
do
  if test -d $I; then
    if [ ! "$RELEASE" = "TRUE" ] ; then
      echo "======================================"
      echo " making install in $I"
      echo "======================================"
    else
      echo -ne "installing module $I ...\r"
    fi
    cd $I 
    if test ! -f Makefile.in ; then
      rebuild_current $I
    fi
    if test ! -f Makefile ; then
      configure_current $I
    fi
    if `test "$CLEAN" = "TRUE"` ; then 
      if [ "$RELEASE" = "TRUE" ] ; then
        make clean >> $GPATH/$LOGFILE 2>&1
      else
        make clean
      fi
    fi
    CONTINUE="r"
    while test "$CONTINUE" = "r" ; do 
      CONTINUE=""
      if ! ( if [ "$RELEASE" = "TRUE" ] ; then
	       if [ "$MAKEONLY" = "TRUE" ] ; then
  	         if [ "$ECXXFLAGS" = "" ] && [ "$EFFLAGS" = "" ] ; then make $EMOPT >> $GPATH/$LOGFILE 2>&1 
                 elif [ "$EFFLAGS" = "" ] ; then make $EMOPT "$ECXXFLAGS" >> $GPATH/$LOGFILE 2>&1 
                 elif [ "$ECXXFLAGS" = "" ] ; then make $EMOPT "$EFFLAGS" >> $GPATH/$LOGFILE 2>&1 
                 else make $EMOPT "$ECXXFLAGS" "$EFFLAGS" >> $GPATH/$LOGFILE 2>&1 
		 fi
               else
	         if [ "$ECXXFLAGS" = "" ] && [ "$EFFLAGS" = "" ] ; then make install $EMOPT >> $GPATH/$LOGFILE 2>&1 
                 elif [ "$EFFLAGS" = "" ] ; then make install $EMOPT "$ECXXFLAGS" >> $GPATH/$LOGFILE 2>&1 
                 elif [ "$ECXXFLAGS" = "" ] ; then make install $EMOPT "$EFFLAGS" >> $GPATH/$LOGFILE 2>&1 
                 else make install $EMOPT "$ECXXFLAGS" "$EFFLAGS" >> $GPATH/$LOGFILE 2>&1 
		 fi
               fi 
             else 
	       if [ "$MAKEONLY" = "TRUE" ] ; then
		 if [ "$ECXXFLAGS" = "" ] && [ "$EFFLAGS" = "" ] ; then make $EMOPT 
                 elif [ "$EFFLAGS" = "" ] ; then make $EMOPT "$ECXXFLAGS" 
                 elif [ "$ECXXFLAGS" = "" ] ; then make $EMOPT "$EFFLAGS" 
                 else make $EMOPT "$ECXXFLAGS" "$EFFLAGS" 
                 fi 
	       else
                 if [ "$ECXXFLAGS" = "" ] && [ "$EFFLAGS" = "" ] ; then make install $EMOPT 
                 elif [ "$EFFLAGS" = "" ] ; then make install $EMOPT "$ECXXFLAGS" 
                 elif [ "$ECXXFLAGS" = "" ] ; then make install $EMOPT "$EFFLAGS" 
                 else make install $EMOPT "$ECXXFLAGS" "$EFFLAGS" 
	         fi 
               fi 
	     fi ) ; then
        if [ "$RELEASE" = "TRUE" ] ; then 
          echo -e "\e[31m\t\t\t\t\t\tfailed\e[0m" 
        else 
	  echo "makeinstall: error: \"make install\" in $I failed"
        fi
        if [ ! "$NOABORT" = "TRUE" ] ; then
          until test "$CONTINUE" = "y" || test "$CONTINUE" = "n" || test "$CONTINUE" = "r" ; do
    	    if ! read -t 300 -n 1 -p "continue anyway (y/n/r/b/c/t) ? " CONTINUE ; then
	      CONTINUE="n"
	    fi
            echo ""
	    if [ "$CONTINUE" = "n" ] ; then
	      if [ "$RELEASE" = "TRUE" ] ; then
                `echo clear`
	        echo -e "\nIt seems that you have problems setting up the package $I"
	        echo -e "If they persist please contact the Sherpa group at\n"
	        echo -e "  support@sherpa-mc.de\n"
		echo -e "Please send us the complete installation logfile '$LOGFILE'\n"
	      fi
              exit 1
	    elif [ "$CONTINUE" = "b" ] ; then
              bash
	      CONTINUE="r"
	    elif [ "$CONTINUE" = "c" ] ; then
	      configure_current $I
	      CONTINUE="r"
	    elif [ "$CONTINUE" = "t" ] ; then
	      rebuild_current $I
	      configure_current $I
	      CONTINUE="r"
	    fi
	  done
        fi
      else
        if [ "$RELEASE" = "TRUE" ] ; then echo -e "\e[32m\t\t\t\t\t\t  done\e[0m" ; fi
      fi
    done
    cd ..
  else
    echo "makeinstall: warning: directory $I not found"
  fi
done;
sleep 1
if [ "$RELEASE" = "TRUE" ] ; then
  if test ! "$CONTINUE" = "n" ; then
    `echo clear`
    echo -e "\e[34m*******************************************************"
    echo -e "*\e[0m                                                     \e[34m*"
    echo -e "*\e[0m\e[1m   Initial setup of Sherpa successfully completed    \e[0m\e[34m*"
    echo -e "*\e[0m                                                     \e[34m*"
    echo -e "*\e[0m  Please check our web page for recent developments  \e[34m*"
    echo -e "*\e[0m                                                     \e[34m*"
    echo -e "*\e[0m              http://www.sherpa-mc.de                \e[34m*"
    echo -e "*\e[0m                                                     \e[34m*"
    echo -e "*******************************************************\e[0m"
    echo -e "\nhave a nice day `whoami`\n"
  fi
fi

# mode:shell-script
# sh-indentation:2
