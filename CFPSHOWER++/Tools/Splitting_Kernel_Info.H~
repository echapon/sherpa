#ifndef CFPSHOWER_Tools_Splitting_Kernel_Info_H
#define CFPSHOWER_Tools_Splitting_Kernel_Info_H

#include "MODEL/Main/Running_AlphaS.H"
#include "MODEL/Main/Running_AlphaQED.H"
#include "MODEL/Main/Single_Vertex.H"
#include "ATOOLS/Phys/Flavour.H"


namespace CFPSHOWER {
  class Splitting_Kernel_Base;
  
  struct kernel_type {
    enum code {
      FF   = 1,
      FI   = 2,
      IF   = 3,
      II   = 4,
      none = 0
    };
  };
  std::ostream &operator<<(std::ostream &s,const kernel_type::code & type);
  
  class Splitting_Kernel_Info {
    MODEL::Running_AlphaS   * p_alphaS;
    MODEL::Running_AlphaQED * p_alpha;
    MODEL::Single_Vertex    * p_vertex;
    ATOOLS::Flavour_Vector    m_flavs;
    Splitting_Kernel_Base   * p_kernel;
    kernel_type::code         m_type;
    bool                      m_swapped;
  public:
    Splitting_Kernel_Info() {}
    Splitting_Kernel_Info(MODEL::Single_Vertex * vertex,
			  ATOOLS::Flavour_Vector & flavs,
			  kernel_type::code type,
			  const bool & swapped=false) :
      p_alphaS(NULL), p_alpha(NULL),
      p_vertex(vertex), m_flavs(flavs), m_type(type), m_swapped(swapped) {
      m_flavs[0]=m_flavs[0].Bar();
    }

    
    inline void SetAlphaS(MODEL::Running_AlphaS * alphaS)    { p_alphaS = alphaS; }
    inline void SetAlphaQED(MODEL::Running_AlphaQED * alpha) { p_alpha  = alpha; }
    inline void SetKernel(Splitting_Kernel_Base * kernel)    { p_kernel = kernel; }
    
    inline const bool                     Swapped()   const { return m_swapped; }
    inline const kernel_type::code        Type()      const { return m_type; } 
    inline MODEL::Running_AlphaS        * GetAlphaS() const { return p_alphaS; }
    inline MODEL::Running_AlphaQED      * GetAlpha()  const { return p_alpha; }
    inline const MODEL::Single_Vertex   * GetVertex() const { return p_vertex; }
    inline const ATOOLS::Flavour_Vector & GetFlavs()  const { return m_flavs; }
    inline const Splitting_Kernel_Base  * GetKernel() const { return p_kernel; }

    const std::string       SFName() const;
    const std::string       GPName() const;

    friend std::ostream &operator<<(std::ostream &s,const Splitting_Kernel_Info & info);
  };// end of struct Splitting

  std::ostream &operator<<(std::ostream &s,const Splitting_Kernel_Info & info);
}// end of namespace CFPSHOWER

#endif
